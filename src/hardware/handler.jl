using Base: @kwdef
import Base: isequal, hash

const stdcomment = "// Autogenerated by Bitstream DSL compiler"

"""
    AbstractHandler

Inherit from this type to create a Verilog generation handler.

This object is responsible for managing all instantiations
of its associated Verilog module.
It should also update the netlist as it adds nets.
"""
abstract type AbstractHandler end

function gethandler end
gethandler(::Bool, args...) = gethandler(args...)

# """
#     HW.@register

# A convenience macro for registering a specific handler to a certain operation type.

# # Examples

# The following code will map any call to `+` with the specified argument/return types
# to the `SAddHandler` object.
# ```julia
# @register(SAddHandler, +, begin
#     [SBit, SBit] => [SBit]
#     [SBit, Vector{SBit}] => [Vector{SBit}]
#     [Vector{SBit}, SBit] => [Vector{SBit}]
#     [Vector{SBit}, Vector{SBit}] => [Vector{SBit}]
#     [SBit, Matrix{SBit}] => [Matrix{SBit}]
#     [Matrix{SBit}, SBit] => [Matrix{SBit}]
#     [Matrix{SBit}, Matrix{SBit}] => [Matrix{SBit}]
# end)
# ```
# """
# macro register(handler, optype, ex)
#     @capture(unblock(rmlines(ex)), rules__) || error("Could not parse registration.")
#     rule_defs = []
#     for rule in rules
#         @capture(rule, ins_ => outs_) ||
#             error("Could not parse registration $rule (use format '[:SBit, :SBit] => [:SBit]')")
#         (@capture(ins, [intypes__]) && @capture(outs, [outtypes__])) ||
#             error("Specify registration as array (use format '[:SBit, :SBit] => [:SBit]'")
#         intypes = map(T -> @q(::Type{$(esc(T))}), intypes)
#         outtypes = map(T -> @q(::Type{$(esc(T))}), outtypes)
#         push!(rule_defs, @q($(esc(:(BitSAD.HW.gethandler)))(::Type{$(esc(optype))}, $(intypes...)) = $(esc(handler))()))
#     end

#     return @q begin
#         $(rule_defs...)
#     end
# end

include("handlers/utils.jl") 
include("handlers/saddhandler.jl")
include("handlers/ssubhandler.jl")
include("handlers/smulthandler.jl")
include("handlers/sdivhandler.jl")
include("handlers/sfdivhandler.jl")
include("handlers/ssqrthandler.jl")
include("handlers/sl2normhandler.jl")
include("handlers/transposehandler.jl")
# include("handlers/daddhandler.jl")
# include("handlers/dsubhandler.jl")
# include("handlers/dmulthandler.jl")
# include("handlers/fxpaddhandler.jl")
# include("handlers/fxpsubhandler.jl")
# include("handlers/fxpmulthandler.jl")
# include("handlers/sdmhandler.jl")
# include("handlers/delaybufferhandler.jl")